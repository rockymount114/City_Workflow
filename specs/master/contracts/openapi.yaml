openapi: 3.0.3
info:
  title: City Workflow Approval System API
  description: API for managing user authentication, application requests, and approval workflows
  version: 1.0.0
  contact:
    name: City IT Department
    email: it@city.gov
servers:
  - url: https://api.city.gov/v1
    description: Production server
  - url: https://staging-api.city.gov/v1
    description: Staging server
security:
  - bearerAuth: []
paths:
  # Authentication
  /auth/login:
    post:
      tags:
        - Authentication
      summary: User login
      description: Authenticate user and return access token
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '429':
          description: Too many attempts
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/logout:
    post:
      tags:
        - Authentication
      summary: User logout
      description: Invalidate user session
      responses:
        '200':
          description: Logout successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'

  /auth/register:
    post:
      tags:
        - Authentication
      summary: User registration
      description: Register new user account
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '201':
          description: Registration successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorResponse'

  /auth/me:
    get:
      tags:
        - Authentication
      summary: Get current user
      description: Retrieve current authenticated user information
      responses:
        '200':
          description: User information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'

  # Applications
  /applications:
    get:
      tags:
        - Applications
      summary: List applications
      description: Get list of available applications
      parameters:
        - in: query
          name: isActive
          schema:
            type: boolean
          description: Filter by active status
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          description: Page number
        - in: query
          name: limit
          schema:
            type: integer
            default: 20
            maximum: 100
          description: Items per page
      responses:
        '200':
          description: Applications list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationsListResponse'

  /applications/{id}:
    get:
      tags:
        - Applications
      summary: Get application details
      description: Get detailed information about specific application
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: Application ID
      responses:
        '200':
          description: Application details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationResponse'
        '404':
          description: Application not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # Application Requests
  /requests:
    get:
      tags:
        - Requests
      summary: List application requests
      description: Get list of application requests (filtered by user role)
      parameters:
        - in: query
          name: status
          schema:
            type: string
            enum: [DRAFT, SUBMITTED, UNDER_REVIEW, APPROVED, REJECTED, CHANGES_REQUESTED]
          description: Filter by status
        - in: query
          name: applicationId
          schema:
            type: string
            format: uuid
          description: Filter by application
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          description: Page number
        - in: query
          name: limit
          schema:
            type: integer
            default: 20
            maximum: 100
          description: Items per page
      responses:
        '200':
          description: Requests list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestsListResponse'

    post:
      tags:
        - Requests
      summary: Create application request
      description: Create new application access request
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateRequestRequest'
      responses:
        '201':
          description: Request created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestResponse'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorResponse'

  /requests/{id}:
    get:
      tags:
        - Requests
      summary: Get request details
      description: Get detailed information about specific request
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: Request ID
      responses:
        '200':
          description: Request details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestResponse'
        '404':
          description: Request not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    put:
      tags:
        - Requests
      summary: Update request
      description: Update application request (draft only)
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: Request ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateRequestRequest'
      responses:
        '200':
          description: Request updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestResponse'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorResponse'
        '403':
          description: Cannot update non-draft request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /requests/{id}/submit:
    post:
      tags:
        - Requests
      summary: Submit request
      description: Submit application request for approval
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: Request ID
      responses:
        '200':
          description: Request submitted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestResponse'
        '400':
          description: Cannot submit request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # Approvals
  /approvals:
    get:
      tags:
        - Approvals
      summary: List pending approvals
      description: Get list of approvals assigned to current user
      parameters:
        - in: query
          name: status
          schema:
            type: string
            enum: [PENDING, APPROVED, REJECTED, CHANGES_REQUESTED, DELEGATED]
          description: Filter by status
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          description: Page number
        - in: query
          name: limit
          schema:
            type: integer
            default: 20
            maximum: 100
          description: Items per page
      responses:
        '200':
          description: Approvals list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApprovalsListResponse'

  /approvals/{id}:
    get:
      tags:
        - Approvals
      summary: Get approval details
      description: Get detailed information about specific approval
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: Approval ID
      responses:
        '200':
          description: Approval details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApprovalResponse'
        '404':
          description: Approval not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /approvals/{id}/action:
    post:
      tags:
        - Approvals
      summary: Process approval action
      description: Approve, reject, or request changes on approval
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: Approval ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProcessApprovalRequest'
      responses:
        '200':
          description: Action processed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApprovalResponse'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorResponse'

  # Admin - Users
  /admin/users:
    get:
      tags:
        - Admin - Users
      summary: List users
      description: Get list of all users (admin only)
      parameters:
        - in: query
          name: role
          schema:
            type: string
            enum: [APPLICANT, APPROVER_L1, APPROVER_L2, ADMIN]
          description: Filter by role
        - in: query
          name: department
          schema:
            type: string
          description: Filter by department
        - in: query
          name: isActive
          schema:
            type: boolean
          description: Filter by active status
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          description: Page number
        - in: query
          name: limit
          schema:
            type: integer
            default: 20
            maximum: 100
          description: Items per page
      responses:
        '200':
          description: Users list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminUsersListResponse'

    post:
      tags:
        - Admin - Users
      summary: Create user
      description: Create new user account (admin only)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorResponse'

  /admin/users/{id}:
    get:
      tags:
        - Admin - Users
      summary: Get user details
      description: Get detailed user information (admin only)
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: User ID
      responses:
        '200':
          description: User details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminUserResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    put:
      tags:
        - Admin - Users
      summary: Update user
      description: Update user information (admin only)
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: User ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserRequest'
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorResponse'

  # Admin - Applications
  /admin/applications:
    post:
      tags:
        - Admin - Applications
      summary: Create application
      description: Create new application type (admin only)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateApplicationRequest'
      responses:
        '201':
          description: Application created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationResponse'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorResponse'

  /admin/applications/{id}:
    put:
      tags:
        - Admin - Applications
      summary: Update application
      description: Update application configuration (admin only)
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: Application ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateApplicationRequest'
      responses:
        '200':
          description: Application updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationResponse'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorResponse'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    # Authentication Schemas
    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          description: User email address
        password:
          type: string
          format: password
          description: User password
        rememberMe:
          type: boolean
          description: Extend session duration

    LoginResponse:
      type: object
      properties:
        user:
          $ref: '#/components/schemas/UserResponse'
        accessToken:
          type: string
          description: JWT access token
        expiresIn:
          type: integer
          description: Token expiration time in seconds

    RegisterRequest:
      type: object
      required:
        - email
        - password
        - firstName
        - lastName
        - employeeId
        - department
        - workPhone
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          format: password
          minLength: 12
          pattern: "^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{12,}$"
        firstName:
          type: string
          minLength: 1
          maxLength: 50
        lastName:
          type: string
          minLength: 1
          maxLength: 50
        employeeId:
          type: string
          pattern: "^EMP[0-9]{6}$"
        department:
          type: string
        division:
          type: string
        workPhone:
          type: string
          pattern: "^\\([0-9]{3}\\) [0-9]{3}-[0-9]{4}$"
        supervisorName:
          type: string
        supervisorEmail:
          type: string
          format: email

    # User Schemas
    UserResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
        email:
          type: string
          format: email
        firstName:
          type: string
        lastName:
          type: string
        employeeId:
          type: string
        department:
          type: string
        division:
          type: string
        workPhone:
          type: string
        supervisorName:
          type: string
        supervisorEmail:
          type: string
        role:
          type: string
          enum: [APPLICANT, APPROVER_L1, APPROVER_L2, ADMIN]
        isActive:
          type: boolean
        lastLoginAt:
          type: string
          format: date-time
        createdAt:
          type: string
          format: date-time

    AdminUserResponse:
      allOf:
        - $ref: '#/components/schemas/UserResponse'
        - type: object
          properties:
            mfaEnabled:
              type: boolean
            failedLoginAttempts:
              type: integer
            lockedUntil:
              type: string
              format: date-time

    CreateUserRequest:
      type: object
      required:
        - email
        - firstName
        - lastName
        - employeeId
        - department
        - role
      properties:
        email:
          type: string
          format: email
        firstName:
          type: string
        lastName:
          type: string
        employeeId:
          type: string
        department:
          type: string
        division:
          type: string
        workPhone:
          type: string
        supervisorName:
          type: string
        supervisorEmail:
          type: string
        role:
          type: string
          enum: [APPLICANT, APPROVER_L1, APPROVER_L2, ADMIN]
        isActive:
          type: boolean
          default: true

    UpdateUserRequest:
      type: object
      properties:
        firstName:
          type: string
        lastName:
          type: string
        department:
          type: string
        division:
          type: string
        workPhone:
          type: string
        supervisorName:
          type: string
        supervisorEmail:
          type: string
        role:
          type: string
          enum: [APPLICANT, APPROVER_L1, APPROVER_L2, ADMIN]
        isActive:
          type: boolean

    # Application Schemas
    ApplicationResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        code:
          type: string
        description:
          type: string
        isActive:
          type: boolean
        requiresApproval:
          type: boolean
        minApprovalLevels:
          type: integer
        maxApprovalLevels:
          type: integer
        customFields:
          type: array
          items:
            $ref: '#/components/schemas/ApplicationField'
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    ApplicationField:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        type:
          type: string
          enum: [TEXT, SELECT, CHECKBOX, DATE, NUMBER, EMAIL, PHONE]
        label:
          type: string
        required:
          type: boolean
        options:
          type: array
          items:
            type: string
        order:
          type: integer

    CreateApplicationRequest:
      type: object
      required:
        - name
        - code
        - description
        - minApprovalLevels
        - maxApprovalLevels
      properties:
        name:
          type: string
        code:
          type: string
        description:
          type: string
        isActive:
          type: boolean
          default: true
        requiresApproval:
          type: boolean
          default: true
        minApprovalLevels:
          type: integer
          minimum: 2
          maximum: 5
        maxApprovalLevels:
          type: integer
          minimum: 2
          maximum: 5
        customFields:
          type: array
          items:
            $ref: '#/components/schemas/ApplicationField'

    UpdateApplicationRequest:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        isActive:
          type: boolean
        requiresApproval:
          type: boolean
        minApprovalLevels:
          type: integer
        maxApprovalLevels:
          type: integer
        customFields:
          type: array
          items:
            $ref: '#/components/schemas/ApplicationField'

    # Request Schemas
    CreateRequestRequest:
      type: object
      required:
        - applicationId
        - requestType
        - environment
        - justification
        - requestedRoles
      properties:
        applicationId:
          type: string
          format: uuid
        requestType:
          type: string
          enum: [NEW_ACCOUNT, EXISTING_ACCOUNT, LOCK_ACCOUNT]
        environment:
          type: string
          enum: [PROD, TEST, BOTH]
        justification:
          type: string
          minLength: 50
        requestedRoles:
          type: array
          items:
            type: string
        fieldValues:
          type: object
          additionalProperties: true

    UpdateRequestRequest:
      type: object
      properties:
        requestType:
          type: string
          enum: [NEW_ACCOUNT, EXISTING_ACCOUNT, LOCK_ACCOUNT]
        environment:
          type: string
          enum: [PROD, TEST, BOTH]
        justification:
          type: string
          minLength: 50
        requestedRoles:
          type: array
          items:
            type: string
        fieldValues:
          type: object
          additionalProperties: true

    RequestResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
        requestNumber:
          type: string
        user:
          $ref: '#/components/schemas/UserResponse'
        application:
          $ref: '#/components/schemas/ApplicationResponse'
        status:
          type: string
          enum: [DRAFT, SUBMITTED, UNDER_REVIEW, APPROVED, REJECTED, CHANGES_REQUESTED, EXPIRED]
        priority:
          type: string
          enum: [LOW, MEDIUM, HIGH, URGENT]
        requestType:
          type: string
          enum: [NEW_ACCOUNT, EXISTING_ACCOUNT, LOCK_ACCOUNT]
        environment:
          type: string
          enum: [PROD, TEST, BOTH]
        justification:
          type: string
        requestedRoles:
          type: array
          items:
            type: string
        fieldValues:
          type: object
        currentLevel:
          type: integer
        totalLevels:
          type: integer
        approvalChain:
          type: array
          items:
            $ref: '#/components/schemas/ApprovalStepResponse'
        submittedAt:
          type: string
          format: date-time
        completedAt:
          type: string
          format: date-time
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    # Approval Schemas
    ProcessApprovalRequest:
      type: object
      required:
        - action
      properties:
        action:
          type: string
          enum: [APPROVE, REJECT, REQUEST_CHANGES, DELEGATE]
        comments:
          type: string
        delegateTo:
          type: string
          format: uuid
          description: Required when action is DELEGATE

    ApprovalResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
        request:
          $ref: '#/components/schemas/RequestResponse'
        level:
          type: integer
        stepOrder:
          type: integer
        approver:
          $ref: '#/components/schemas/UserResponse'
        status:
          type: string
          enum: [PENDING, APPROVED, REJECTED, CHANGES_REQUESTED, DELEGATED, EXPIRED]
        action:
          type: string
          enum: [APPROVE, REJECT, REQUEST_CHANGES, DELEGATE]
        comments:
          type: string
        delegatedTo:
          $ref: '#/components/schemas/UserResponse'
        assignedAt:
          type: string
          format: date-time
        actionAt:
          type: string
          format: date-time
        dueAt:
          type: string
          format: date-time

    ApprovalStepResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
        level:
          type: integer
        stepOrder:
          type: integer
        approver:
          $ref: '#/components/schemas/UserResponse'
        status:
          type: string
          enum: [PENDING, APPROVED, REJECTED, CHANGES_REQUESTED, DELEGATED, EXPIRED]
        action:
          type: string
          enum: [APPROVE, REJECT, REQUEST_CHANGES, DELEGATE]
        comments:
          type: string
        assignedAt:
          type: string
          format: date-time
        actionAt:
          type: string
          format: date-time

    # List Response Schemas
    ApplicationsListResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/ApplicationResponse'
        pagination:
          $ref: '#/components/schemas/PaginationInfo'

    RequestsListResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/RequestResponse'
        pagination:
          $ref: '#/components/schemas/PaginationInfo'

    ApprovalsListResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/ApprovalResponse'
        pagination:
          $ref: '#/components/schemas/PaginationInfo'

    AdminUsersListResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/AdminUserResponse'
        pagination:
          $ref: '#/components/schemas/PaginationInfo'

    PaginationInfo:
      type: object
      properties:
        page:
          type: integer
        limit:
          type: integer
        total:
          type: integer
        totalPages:
          type: integer
        hasNext:
          type: boolean
        hasPrev:
          type: boolean

    # Error Schemas
    ErrorResponse:
      type: object
      properties:
        error:
          type: object
          properties:
            code:
              type: string
            message:
              type: string
            details:
              type: object

    ValidationErrorResponse:
      type: object
      properties:
        error:
          type: object
          properties:
            code:
              type: string
            message:
              type: string
            fields:
              type: object
              additionalProperties:
                type: array
                items:
                  type: string

    SuccessResponse:
      type: object
      properties:
        success:
          type: boolean
        message:
          type: string